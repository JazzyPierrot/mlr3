% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/benchmark.R
\name{benchmark_continue}
\alias{benchmark_continue}
\title{Repeat a Benchmark}
\usage{
benchmark_continue(learners, benchmark_result, store_models = FALSE)
}
\arguments{
\item{learners}{(list of \link{Learner})\cr
Learners with increased budget hyperparameter.}

\item{benchmark_result}{(\link{BenchmarkResult}).
Benchmark result with stored models.}

\item{store_models}{(\code{logical(1)})\cr
Keep the fitted model after the test set has been predicted?
Set to \code{TRUE} if you want to further analyse the models or want to
extract information like variable importance.}
}
\value{
\link{BenchmarkResult}.
}
\description{
Repeats a benchmark with continuable models. The models stored in
\code{benchmark_result} (\link{BenchmarkResult}) are updated with the additional budget
in \code{learners} (list of \link{Learner}), the training continues on the training
sets and the performance is again evaluated on the test sets.
}
\note{
The fitted models are discarded after the predictions have been scored in
order to reduce memory consumption. If you need access to the models for
later analysis, set \code{store_models} to \code{TRUE}.
}
\section{Parallelization}{


This function can be parallelized with the \CRANpkg{future} package.
One job is one resampling iteration, and all jobs are send to an apply function
from \CRANpkg{future.apply} in a single batch.
To select a parallel backend, use \code{\link[future:plan]{future::plan()}}.
}

\section{Progress Bars}{

This function supports progress bars via the package \CRANpkg{progressr}.
Simply wrap the function in \code{\link[progressr:with_progress]{progressr::with_progress()}} to enable them.
We recommend to use package \CRANpkg{progress} as backend; enable with
\code{progressr::handlers("progress")}.
}

\section{Logging}{


The \CRANpkg{mlr3} uses the \CRANpkg{lgr} package for logging.
\CRANpkg{lgr} supports multiple log levels which can be queried with
\code{getOption("lgr.log_levels")}.

To suppress output and reduce verbosity, you can lower the log from the
default level \code{"info"} to \code{"warn"}:\preformatted{lgr::get_logger("mlr3")$set_threshold("warn")
}

To get additional log output for debugging, increase the log level to \code{"debug"}
or \code{"trace"}:\preformatted{lgr::get_logger("mlr3")$set_threshold("debug")
}

To log to a file or a data base, see the documentation of \link[lgr:lgr-package]{lgr::lgr-package}.
}

